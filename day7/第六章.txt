6.2 
    1.if-elif-else-fi语句
        if 
        then ..
        else ..
        fi

    逻辑的not、and与or
        ! && ||

    test 命令 处理shell脚本里的各类工作,它产生的不是一般输出，而是可以使用的退出状态
    两种方式
    if  test "$str1"="$str2"  <==>    if ["$str1"="$str2"]
    then
        ...
    fi

    2.case 语句
    case $1 in
    -f)
        ...
        ;;
    -d | --directory)
        ...
        ;;
    *)
        echo $1:unknown option >&2
        exit 1
        ;;
    esac

    3.for循环
    for i in atlbrochure*.xml
    do
        echo $i
        my $i $i.old
        sed 's/Atlanta/&,the capital of the South/' < $i.old > $i
    done
    循环中in list可选，如果省略，shell循环整个命令行参数 即 for i in "$@"

    4.while与until循环
    pattern=...
    while [ -n "$string" ]
    do
        string=${string%$pattern}  //${} 从尾扫描pattern，将匹配的字符过滤掉。%为最短，%%为最长
    done

    printf "Enter username: "
    read user
    until who | grep "$user" > /dev/null
    do
        sleep
    done
    也可以将管道放到while循环中，用来重复处理数据
    产生数据|while read name rank serial_no
            do
                ...
            done
    
    5.break与continue
    printf "Enter username: "
    read user
    while true
    do
        if who | grep "$user" > /dev/null
        then 
            break
        fi

        sleep 30
    done

    6.shift与选项的处理
    file= verbose= quiet= long=
    while [ $# -gt 0 ]
    do
        case $1 in
        -f) file=$2
            shift
            ;;
        -v) verbose=true
            quiet
            ;;
        -q) quiet=true
            verbose
            ;;
        -l) long=true
            ;;
        --) shift
            break
            ;;
        -*) echo $0:$1:unrecognized option >&2
            ;;
        *)  break
            ;;
        esac
        shift
    done

    getopts
    file= verbose= quiet= long=
    while getopts f:vql opt
    do
        case $opt in
        f)  file=$OPTARG
            ;;
        v)  verbose=true
            quiet=
            ;;
        q)  quiet=true
            verbose=
            ;;
        l)  long=true
            ;;
        esac
    done
    shift $((OPTIND-1))
    运行：./xxx.sh -f aaa  //getopts f:vql f为列出合法选项字母的字符串，有冒号表示第一个参数必须提供，参数值存在OPTANG中，OPTIND包含下一个参数索引
                                    opt     第二个参数为变量名称，找到合适的选项字母
                                    :f:vql 开头冒号是处理错误选项的 '?')
    
    7.函数
    定义：一段单独的程序代码，用以执行一些定义完整的单项工作
    例：
    wait_for_user(){
        until who | grep "$1" > /dev/null
        do
            sleep $(2:-30)   // $(var:-default)   当var为空或未定义时整个表达式的值为default
                                $(var-default)    当且仅当var未定义时整个表达式的值为default
        done
    }









